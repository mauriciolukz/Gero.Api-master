// <auto-generated />
using System;
using Gero.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gero.API.Migrations
{
    [DbContext(typeof(DistributionContext))]
    [Migration("20180926151326_CreateApproverType")]
    partial class CreateApproverType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gero.API.Models.AllowedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsForExport");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ItemCode")
                        .IsUnique();

                    b.ToTable("AllowedItems","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ApplicationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<string>("VersionCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("VersionDate");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ApplicationVersions","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ApproverType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ApproverTypes","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.AuthorizationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<decimal>("CustomerCode")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("EntityId");

                    b.Property<string>("Route")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorizationCodes","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ConsolidatedOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("OrderStatus");

                    b.Property<int>("PickingId");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ConsolidatedOrders","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ContainerLoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("DeliveryRoute")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("DueDate");

                    b.Property<DateTimeOffset>("LoadDate");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PresaleRoute")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("SynchronizationDate");

                    b.HasKey("Id");

                    b.ToTable("ContainerLoans","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ContainerLoanItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoxesQuantity");

                    b.Property<int>("ContainerLoanId");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("LoanItemStatus");

                    b.Property<decimal>("Subtotal")
                        .HasColumnName("Subtotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Total")
                        .HasColumnName("Total")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("TotalOfUnits");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnName("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("UnitsPerBox");

                    b.Property<int>("UnitsQuantity");

                    b.Property<decimal>("VAT")
                        .HasColumnName("VAT")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerLoanId");

                    b.ToTable("ContainerLoanItems","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ContainerReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDRetorno")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("MontoDevolucion")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("CustomerCode")
                        .HasColumnName("CodigoCliente")
                        .HasMaxLength(10);

                    b.Property<string>("DeliveryRoute")
                        .HasColumnName("RutaEntrega")
                        .HasMaxLength(15);

                    b.Property<bool>("IsPresale")
                        .HasColumnName("Preventa");

                    b.Property<bool>("IsReturnFinished")
                        .HasColumnName("Finalizado");

                    b.Property<string>("PresaleRoute")
                        .HasColumnName("RutaPreventa")
                        .HasMaxLength(15);

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnName("FechaRetorno");

                    b.Property<string>("ReturnNumber")
                        .IsRequired()
                        .HasColumnName("NumRetorno")
                        .HasMaxLength(30);

                    b.Property<DateTime>("SynchronizationDate")
                        .HasColumnName("FechaCarga");

                    b.HasKey("Id");

                    b.ToTable("DST_RetornoEnvase","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ContainerReturnItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDLinea")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContainerFamily")
                        .HasColumnName("Familia");

                    b.Property<decimal>("ContainerPrice")
                        .HasColumnName("PrecioEnvase")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ContainerQuantity")
                        .HasColumnName("Cantidad");

                    b.Property<int>("ContainerReturnId")
                        .HasColumnName("IDRetorno");

                    b.Property<string>("ContainerSize")
                        .IsRequired()
                        .HasColumnName("Tamanio")
                        .HasMaxLength(150);

                    b.Property<string>("ItemCode")
                        .HasColumnName("SKU")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ContainerReturnId");

                    b.ToTable("DST_DetalleRetorno","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Countries","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.DeliveryRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("Fecha");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasColumnName("CodigoRuta")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("DST_RutaEntrega_48","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("CountryId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Departments","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("IMEI")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("MacPrinter")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("PhoneNumber");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<string>("Version")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Devices","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreationUserId");

                    b.Property<DateTime>("ExchangeDate");

                    b.Property<int?>("ModificationUserId");

                    b.Property<decimal>("Rate")
                        .HasColumnName("Rate")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ExchangeRateByCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreationUserId");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("ExchangeDate");

                    b.Property<int?>("ModificationUserId");

                    b.Property<decimal>("Rate")
                        .HasColumnName("Rate")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRateByCustomers","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDFactura")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AmountOfCentralization")
                        .HasColumnName("MontoCentralizacion")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnName("CodigoCliente")
                        .HasMaxLength(30);

                    b.Property<string>("ForeignInvoiceNumber")
                        .HasColumnName("NumFacturaBPCS")
                        .HasMaxLength(30);

                    b.Property<string>("ForeignOrderNumber")
                        .HasColumnName("NumPedidoBPCS")
                        .HasMaxLength(30);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnName("FechaFactura");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnName("NumFactura")
                        .HasMaxLength(30);

                    b.Property<bool>("IsCashForeignInvoice")
                        .HasColumnName("ContadoSS");

                    b.Property<bool>("IsCashInvoice")
                        .HasColumnName("Contado");

                    b.Property<bool>("IsInvoiceFinished")
                        .HasColumnName("Procesado");

                    b.Property<string>("ManualInvoiceNumber")
                        .HasColumnName("FacturaManual")
                        .HasMaxLength(30);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("FechaPedido");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnName("NumPedido")
                        .HasMaxLength(30);

                    b.Property<decimal?>("PercentageOfCentralization")
                        .HasColumnName("PorcenCentralizacion")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Route")
                        .HasColumnName("Ruta")
                        .HasMaxLength(15);

                    b.Property<decimal>("Subtotal")
                        .HasColumnName("SubTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("SynchronizationDate")
                        .HasColumnName("FechaCarga");

                    b.Property<int?>("SynchronizationId")
                        .HasColumnName("IDRS");

                    b.Property<decimal>("Total")
                        .HasColumnName("Total")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TotalInForeignCurrency")
                        .HasColumnName("TotalDolares")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("VAT")
                        .HasColumnName("IVA")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.ToTable("DST_Factura","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDLinea")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountOfCentralization")
                        .HasColumnName("MontoCentralizacion")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("BoxesQuantity")
                        .HasColumnName("CantidadCajas");

                    b.Property<decimal>("ContainerAmount")
                        .HasColumnName("MontoEnvases")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("InvoiceId")
                        .HasColumnName("IDFactura");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnName("SKU")
                        .HasMaxLength(30);

                    b.Property<decimal>("Subtotal")
                        .HasColumnName("SubTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Total")
                        .HasColumnName("Total")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("TotalOfUnits")
                        .HasColumnName("TotalUnidades");

                    b.Property<int>("UnitsQuantity")
                        .HasColumnName("CantidadUnidades");

                    b.Property<decimal>("VAT")
                        .HasColumnName("IVA")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("DST_DetalleFactura","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ItemCentralizationByCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerCode");

                    b.Property<string>("ItemCode")
                        .IsRequired();

                    b.Property<decimal>("PercentageOfCentralization")
                        .HasColumnName("PercentageOfCentralization")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.ToTable("ItemCentralizationByCustomers","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("ImageURL")
                        .IsRequired();

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ItemImages","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("ClassType")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int?>("OrderTypeId");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Position")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Modules","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Motive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Motives","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.MotivesNotToSell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnName("CodigoCliente")
                        .HasMaxLength(30);

                    b.Property<DateTime>("MotiveDate")
                        .HasColumnName("Fecha");

                    b.Property<int?>("MotivesNotToSellTypeId")
                        .IsRequired()
                        .HasColumnName("MotivoNoVenta");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasColumnName("CodigoRuta")
                        .HasMaxLength(15);

                    b.Property<DateTime>("SynchronizationDate")
                        .HasColumnName("FechaCarga");

                    b.Property<int>("VisitType")
                        .HasColumnName("TipoVisita");

                    b.HasKey("Id");

                    b.HasIndex("MotivesNotToSellTypeId");

                    b.ToTable("MotivesNotToSells");
                });

            modelBuilder.Entity("Gero.API.Models.MotivesNotToSellType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MotivesNotToSellTypes");
                });

            modelBuilder.Entity("Gero.API.Models.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Municipalities","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDPedido")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConsolidatedOrderId")
                        .HasColumnName("Consolidado");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnName("CodigoCliente")
                        .HasMaxLength(30);

                    b.Property<DateTimeOffset>("DeliveryDate")
                        .HasColumnName("FechaEntrega");

                    b.Property<string>("DeliveryRoute")
                        .IsRequired()
                        .HasColumnName("RutaEntrega")
                        .HasMaxLength(15);

                    b.Property<bool>("IsOrderConfirmed")
                        .HasColumnName("PedidoConfirmado");

                    b.Property<bool>("IsOrderFinished")
                        .HasColumnName("Finalizado");

                    b.Property<int?>("MotiveId")
                        .HasColumnName("Motivo");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("FechaPedido");

                    b.Property<string>("OrderLocation")
                        .HasColumnName("GeoReferencia");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnName("NumPedido")
                        .HasMaxLength(100);

                    b.Property<int?>("OrderTypeId")
                        .HasColumnName("TipoPedido");

                    b.Property<string>("PresaleRoute")
                        .IsRequired()
                        .HasColumnName("RutaPreventa")
                        .HasMaxLength(15);

                    b.Property<DateTime>("SynchronizationDate")
                        .HasColumnName("FechaCarga");

                    b.Property<decimal>("TotalInForeignCurrency")
                        .HasColumnName("TotalDolares")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("DST_Pedido","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDLinea")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountOfCentralization")
                        .HasColumnName("MontoCentralizacion")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("BoxesQuantity")
                        .HasColumnName("CantidadCajas");

                    b.Property<decimal>("ContainerAmount")
                        .HasColumnName("MontoEnvases")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ContainerPrice")
                        .HasColumnName("PrecioEnvase")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("IsExempt")
                        .HasColumnName("Exento");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnName("SKU")
                        .HasMaxLength(30);

                    b.Property<string>("ItemFamily")
                        .IsRequired()
                        .HasColumnName("Familia")
                        .HasMaxLength(30);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnName("SKUDescripcion")
                        .HasMaxLength(100);

                    b.Property<int>("OrderId")
                        .HasColumnName("IDPedido");

                    b.Property<decimal>("Subtotal")
                        .HasColumnName("SubTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Total")
                        .HasColumnName("Total")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("TotalOfUnits")
                        .HasColumnName("TotalUnidades");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnName("PrecioUnitario")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("UnitsPerBox")
                        .HasColumnName("Conteo");

                    b.Property<int>("UnitsQuantity")
                        .HasColumnName("CantidadUnidades");

                    b.Property<decimal>("VAT")
                        .HasColumnName("IVA")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("DST_DetallePedido","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("OrderTypes","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.OrderTypeMotive", b =>
                {
                    b.Property<int>("OrderTypeId");

                    b.Property<int>("MotiveId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("OrderTypeId", "MotiveId");

                    b.HasIndex("MotiveId");

                    b.ToTable("OrderTypeMotives","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RoleType");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Roles","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.RoleModule", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("ModuleId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("RoleId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("RoleModules","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Route", b =>
                {
                    b.Property<string>("RouteCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RouteName");

                    b.Property<string>("RouteType");

                    b.Property<string>("WarehouseCode");

                    b.HasKey("RouteCode");

                    b.HasIndex("WarehouseCode");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Gero.API.Models.RouteEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RouteEvents","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.RouteEventItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ActionDate");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("RouteEventId");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("RouteEventId");

                    b.ToTable("RouteEventItems","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.RouteSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDeposited")
                        .HasColumnName("MontoTotalDeposito")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountInBankMinute")
                        .HasColumnName("MontoTotalMinutas")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountSold")
                        .HasColumnName("MontoTotalVentas")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnName("Fecha");

                    b.Property<int>("EffectiveBusinessQuantity")
                        .HasColumnName("NegociosEfectivos");

                    b.Property<int>("FinalMileage")
                        .HasColumnName("KMFinal");

                    b.Property<int>("InitialMileage")
                        .HasColumnName("KMInicial");

                    b.Property<int>("KilometersTraveled")
                        .HasColumnName("KMRecorrido");

                    b.Property<int>("NotEffectiveBusinessQuantity")
                        .HasColumnName("NoVenta");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasColumnName("CodigoRuta")
                        .HasMaxLength(10);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnName("MontoTotalPedidos")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("TypeOfVisit")
                        .IsRequired()
                        .HasColumnName("TipoVisita")
                        .HasMaxLength(10);

                    b.Property<int>("VisitedBusinessQuantity")
                        .HasColumnName("NegociosVisitados");

                    b.HasKey("Id");

                    b.ToTable("DST_ResumenRuta","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.SalesChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Route")
                        .IsRequired();

                    b.Property<int?>("SalesRegionId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("SalesRegionId");

                    b.ToTable("SalesChannels","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.SalesRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("SalesRegions","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.SynchronizationStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiURL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("SynchronizationSteps","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.TargetSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("ItemFamilyCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("Month");

                    b.Property<int>("NineLitresTarget");

                    b.Property<int>("NineLitresTargetPerDay");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<decimal>("TargetAmount")
                        .HasColumnName("TargetAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TargetAmountPerDay")
                        .HasColumnName("TargetAmountPerDay")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("WorkingDays");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("TargetSales","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.TypeOfVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TypeOfVisits");
                });

            modelBuilder.Entity("Gero.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset>("InvitationAcceptedAt");

                    b.Property<DateTimeOffset>("InvitationSentAt");

                    b.Property<string>("InvitationToken")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Password");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<DateTimeOffset>("ResetPasswordExpiredAt");

                    b.Property<DateTimeOffset>("ResetPasswordSentAt");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Users","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.UserDevice", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("DeviceId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("UserId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("UserDevices","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("Birthdate");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(20);

                    b.Property<string>("MunicipalityCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NationalityCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInfos","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Route")
                        .IsRequired();

                    b.Property<int>("TypeOfVisitId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.UserTelephone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TelephoneType")
                        .IsRequired();

                    b.Property<int?>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserTelephones","DISTRIBUCION");
                });

            modelBuilder.Entity("Gero.API.Models.Warehouse", b =>
                {
                    b.Property<string>("WarehouseCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("WarehouseName");

                    b.HasKey("WarehouseCode");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Gero.API.Models.AuthorizationCode", b =>
                {
                    b.HasOne("Gero.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.ContainerLoanItem", b =>
                {
                    b.HasOne("Gero.API.Models.ContainerLoan", "ContainerLoan")
                        .WithMany("Items")
                        .HasForeignKey("ContainerLoanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.ContainerReturnItem", b =>
                {
                    b.HasOne("Gero.API.Models.ContainerReturn", "ContainerReturn")
                        .WithMany("Items")
                        .HasForeignKey("ContainerReturnId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.Department", b =>
                {
                    b.HasOne("Gero.API.Models.Country", "Country")
                        .WithMany("Departments")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Gero.API.Models.InvoiceItem", b =>
                {
                    b.HasOne("Gero.API.Models.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.Module", b =>
                {
                    b.HasOne("Gero.API.Models.Module", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Gero.API.Models.MotivesNotToSell", b =>
                {
                    b.HasOne("Gero.API.Models.MotivesNotToSellType", "MotivesNotToSellType")
                        .WithMany()
                        .HasForeignKey("MotivesNotToSellTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.Municipality", b =>
                {
                    b.HasOne("Gero.API.Models.Department", "Department")
                        .WithMany("Municipalities")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Gero.API.Models.Order", b =>
                {
                    b.HasOne("Gero.API.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId");
                });

            modelBuilder.Entity("Gero.API.Models.OrderItem", b =>
                {
                    b.HasOne("Gero.API.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.OrderType", b =>
                {
                    b.HasOne("Gero.API.Models.OrderType", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Gero.API.Models.OrderTypeMotive", b =>
                {
                    b.HasOne("Gero.API.Models.Motive", "Motive")
                        .WithMany()
                        .HasForeignKey("MotiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gero.API.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.RoleModule", b =>
                {
                    b.HasOne("Gero.API.Models.Module", "Module")
                        .WithMany("Roles")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gero.API.Models.Role", "Role")
                        .WithMany("Modules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.Route", b =>
                {
                    b.HasOne("Gero.API.Models.Warehouse")
                        .WithMany("Routes")
                        .HasForeignKey("WarehouseCode");
                });

            modelBuilder.Entity("Gero.API.Models.RouteEvent", b =>
                {
                    b.HasOne("Gero.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.RouteEventItem", b =>
                {
                    b.HasOne("Gero.API.Models.RouteEvent", "RouteEvent")
                        .WithMany()
                        .HasForeignKey("RouteEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.SalesChannel", b =>
                {
                    b.HasOne("Gero.API.Models.SalesRegion", "SalesRegion")
                        .WithMany("SalesChannels")
                        .HasForeignKey("SalesRegionId");
                });

            modelBuilder.Entity("Gero.API.Models.UserDevice", b =>
                {
                    b.HasOne("Gero.API.Models.Device", "Device")
                        .WithMany("Users")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gero.API.Models.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.UserInfo", b =>
                {
                    b.HasOne("Gero.API.Models.User", "User")
                        .WithOne("Info")
                        .HasForeignKey("Gero.API.Models.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.UserRole", b =>
                {
                    b.HasOne("Gero.API.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gero.API.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.UserSetting", b =>
                {
                    b.HasOne("Gero.API.Models.User", "User")
                        .WithOne("Setting")
                        .HasForeignKey("Gero.API.Models.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gero.API.Models.UserTelephone", b =>
                {
                    b.HasOne("Gero.API.Models.UserInfo", "UserInfo")
                        .WithMany("Phones")
                        .HasForeignKey("UserInfoId");
                });
#pragma warning restore 612, 618
        }
    }
}
